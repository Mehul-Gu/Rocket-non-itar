# -*- coding: utf-8 -*-
"""
Created on Thu Mar 24 19:39:27 2022

@author: mgupta
"""
#Note - This tool is meant for filling a downstream volume under choked flow. 
#If the outlet pressure is more than 0.5 of the upstream pressure than that part is wrong.

import numpy as np
import math
import matplotlib.pyplot as plt
from CoolProp.CoolProp import PropsSI

#initializing nonsense - ignore
i = 0
k = 0
n = 0
j = 0
newflowrate = 0
Pressure = []
timepressuresum = []
pressuresumflowrate = []
pressuresum = 0

#Parameters to set
Volume = 1;
R = 287.058;
Temperature = 298;
time = np.arange(1, 154, 1)
upstreampressurepsi = 200
Dorifice = np.arange(0.00025, 0.00086, 0.000004)
specific_heat_ratio = 1.4
Cd = .62

#calcs with the set parameters above
Aorifice = math.pi*((Dorifice/2)**2)
upstreampressure = 6894.76*upstreampressurepsi
rho = PropsSI('D', 'T', Temperature, 'P', upstreampressure, 'Air')
exponentialrightstuff = (specific_heat_ratio+1)/(specific_heat_ratio-1)
nonsenserightstuff = (2/(specific_heat_ratio+1))
rightstuffcombined = nonsenserightstuff**(exponentialrightstuff)
flowrate = (Cd*Aorifice)*(math.sqrt(1.4*upstreampressure*rho))*rightstuffcombined

while i<len(flowrate):
    newflowrate = flowrate[i]
    timepressuresum = []
    while n<len(time):
        k=0
        flowratearray = []
        flowratesum = 0
        while k<=time[n]:
            flowratearray.append(newflowrate)
            flowratesum = flowratesum + flowratearray[k]
            k += 1
        n += 1
        timepressuresum.append((flowratesum/Volume)*R*Temperature*0.000145038)
    i += 1
    n=0
    pressuresumflowrate.append(timepressuresum)

#graphing part of the code
data = np.array(pressuresumflowrate)
x, y = np.meshgrid(Dorifice*39.3701, time)

fig = plt.figure()
ax = fig.add_subplot(1,1,1, projection='3d')
ax.plot_surface(x, y, data)
ax.legend()

ax.set_xlabel('$Diameter of Orifice (in)$', rotation=150)
ax.set_ylabel('$Time (s)$')
ax.set_zlabel(r'$Pressure (psi)$', rotation=60)
ax.text2D(0.05, 0.95, f"Volume = {Volume}m^3", transform=ax.transAxes)
ax.text2D(0.05, 0.92, f"Upstream Pressure = {upstreampressurepsi}psi", transform=ax.transAxes)
plt.show()


